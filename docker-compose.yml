version: '3.2'

services:
  cfssl:
    build:
      dockerfile: cfssl.dockerfile
      context: images/
    restart: 'no'
    volumes:
      - ./config/cfssl:/etc/sslconf:ro
      - ./data/ssl/internal:/etc/ssl:rw
      - ./data/ssl/public:/etc/tmp_ssl:rw
    env_file:
      - env/certbot.env

  database:
    image: postgres:12-alpine
    restart: unless-stopped
    volumes:
      - database:/var/lib/postgresql/data
      - ./one_time_config/postgresql.init:/docker-entrypoint-initdb.d:ro
    env_file: 
      - env/postgre.env
      - env/authentik_postgres.env
      - env/hass_postgre.env
    networks:
      - backbone
  
  pgadmin:
    image: dpage/pgadmin4:6.9
    restart: unless-stopped
    env_file:
      - env/pgadmin.env
      - env/pgadmin_oauth.env
    user: "${UID}:${GID}"
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin:rw
      - ./config/pgadmin/config_local.py:/pgadmin4/config_local.py
      - ./data/ssl/internal/certs/pgadmin/pgadmin.pem:/certs/server.cert
      - ./data/ssl/internal/certs/pgadmin/privkey.pem:/certs/server.key
    depends_on:
      - database
    networks:
      - mgnmt
      - auth
      - backbone

  certbot:
    build:
      dockerfile: certbot.dockerfile
      context: images/
    volumes:
      - ./data/certwww/:/var/www/certbot/:rw
      - ./data/ssl/public/:/etc/letsencrypt/:rw
    env_file:
      - env/certbot.env

  duckdns:
    image: linuxserver/duckdns:latest
    env_file:
      - env/duckdns.env

  nginx:
    image: nginx:stable-alpine
    restart: unless-stopped
    ports:
      - 443:443
      - 80:80
    volumes:
      - ./config/nginx:/etc/nginx/conf.d:ro
      - ./data/ssl/internal/ca_intermediate/intermediate_ca_fullchain.pem:/etc/ca/intermediate_ca_fullchain.pem:ro
      - ./data/ssl/public:/etc/ssl/:ro
      - ./data/certwww:/var/www/certbot
    depends_on:
      - authentik-server
      - homeassistant
    networks:
      - auth
      - ingress
      - hass
      - mgnmt
  
  redis:
    image: redis:7.0.0-alpine
    restart: unless-stopped
    entrypoint: /bin/sh
    command: /init/init.sh
    env_file:
      - env/authentik_redis.env
    networks:
      - auth
    volumes:
      - ./one_time_config/redis.init/:/init:ro

  authentik-server:
    image: ghcr.io/goauthentik/server:2022.4.1
    restart: unless-stopped
    depends_on:
      - cfssl
      - database
      - redis
      - geoipupdate
    entrypoint: /bin/sh
    command: /init/init.sh
    env_file:
      - env/authentik.env
      - env/authentik_postgres.env
      - env/authentik_redis.env
      - env/hass_user.env
      - env/hass_web.env
      - env/pgadmin_oauth.env
      - env/vscode.env
      - env/portainer.env
    volumes:
      - ./one_time_config/authentik.init/:/init
      - ./data/authentik/media:/media
      - ./data/authentik/custom-templates:/templates
      - geoip:/geoip
    networks:
      - backbone
      - auth
    ports:
      - 9000:9443
  
  authentik-worker:
    image: ghcr.io/goauthentik/server:2022.4.1
    restart: unless-stopped
    command: worker
    depends_on:
      - cfssl
      - database
      - redis
      - geoipupdate
    env_file:
      - env/authentik.env
      - env/authentik_postgres.env
      - env/authentik_redis.env
    user: root
    volumes:
      - ./data/authentik/media:/media
      - ./data/authentik/custom-templates:/templates
      - ./data/ssl/internal/certs/authentik-server:/certs/authentik-server
      - /var/run/docker.sock:/var/run/docker.sock
      - geoip:/geoip
    networks:
      - backbone
      - auth
  
  geoipupdate:
    image: "maxmindinc/geoipupdate:v4.9"
    restart: unless-stopped
    volumes:
      - "geoip:/usr/share/GeoIP"
    env_file:
      - env/geoip.env
    networks:
      - auth

  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:2022.5.4
    restart: unless-stopped
    privileged: true
    environment:
        - TZ=Europe/Rome
    volumes:
        - ./config/homeassistant/config:/config/config
        - ./config/homeassistant/configuration.yaml:/config/configuration.yaml
        - ./config/homeassistant/secrets.yaml:/config/secrets.yaml
        - ./data/homeassistant/.cloud/:/config/.cloud
        - ./data/homeassistant/.storage/:/config/.storage
        - ./data/homeassistant/blueprints/:/config/blueprints
        - ./data/homeassistant/custom_components/:/config/custom_components
        - ./data/homeassistant/tts/:/config/tts
        - ./data/ssl/internal/certs/homeassistant:/etc/ssl/:ro
        - ./external/hass-auth-header/custom_components/auth_header:/config/custom_components/auth_header
        - ./data/homeassistant/media:/media
    env_file:
      - env/hass_postgre.env
      - env/hass_user.env
      - env/hass_web.env
    networks:
      - backbone
      - hass

  vscode:
    image: codercom/code-server:4.4.0
    networks:
      - mgnmt
    volumes:
      - ./config/vscode/:/home/coder/.config/code-server/
      - ./config:/home/coder/project/configs/
      - ./docker-compose.yml:/home/coder/project/docker-compose.yml
      - ./data/ssl/internal/certs/vscode:/etc/ssl
    env_file:
      - env/vscode.env
  
  portainer:
    image: portainer/portainer-ce:2.13.1-alpine
    command: --ssl --sslcert /etc/ssl/fullchain.pem --sslkey /etc/ssl/privkey.pem
    networks:
      - mgnmt
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
      - ./data/ssl/internal/certs/portainer/:/etc/ssl/:ro
    env_file:
      - env/portainer.env

volumes:
  database:
    driver: local
  portainer_data:
    driver: local
  geoip:
    driver: local

networks:
  backbone:
    ipam:
      config:
        - subnet: 172.0.0.0/16
  auth:
    ipam:
      config:
        - subnet: 172.1.0.0/16
  ingress:
    ipam:
      config:
        - subnet: 172.254.0.0/16
  hass:
    ipam:
      config:
        - subnet: 172.2.0.0/16
  mgnmt:
    ipam:
      config:
        - subnet: 172.253.0.0/16